/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package VASL.build.module.map;

import VASSAL.build.module.map.PieceMover;
import VASSAL.tools.imageop.Op;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.dnd.DnDConstants;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.Enumeration;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Federico
 */
public class QCConfig 
{
    private QCConfiguration m_objConfiguration;
    private JFrame m_objFrame;
    final private QCConfig m_objSelf = this;
    private DefaultMutableTreeNode m_objRootNode;
    
    public QCConfig() 
    {
        m_objConfiguration  = null;
        m_objFrame = null;       
        m_objRootNode = null;
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        QCConfigTB = new javax.swing.JToolBar();
        jButton5 = new javax.swing.JButton();
        QCSP = new javax.swing.JScrollPane();
        QCTree = new javax.swing.JTree(LoadConfiguration());
        
        expandAll(QCTree);
        
        QCConfigTB.setFloatable(false);
        QCConfigTB.setOrientation(javax.swing.SwingConstants.VERTICAL);
        QCConfigTB.setRollover(true);
        QCConfigTB.setMaximumSize(new java.awt.Dimension(64, 23));
        QCConfigTB.setMinimumSize(new java.awt.Dimension(64, 23));
        QCConfigTB.setPreferredSize(new java.awt.Dimension(64, 23));

        jButton5.setText("jButton5");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        QCConfigTB.add(jButton5);

        QCSP.setName(""); // NOI18N
        QCSP.setPreferredSize(new java.awt.Dimension(300, 500));
        QCSP.setRequestFocusEnabled(false);

        QCTree.setShowsRootHandles(true);
        QCTree.setToggleClickCount(1);
        QCSP.setViewportView(QCTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(m_objFrame.getContentPane());
        m_objFrame.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(QCSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(QCConfigTB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(QCConfigTB, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
            .addComponent(QCSP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        QCSP.getAccessibleContext().setAccessibleName("");

        m_objFrame.pack();
    }// </editor-fold>                        
    
    public void expandAll(JTree tree) {
        TreeNode root = (TreeNode) tree.getModel().getRoot();
        expandAll(tree, new TreePath(root));
    }

    private void expandAll(JTree tree, TreePath parent) 
    {
        TreeNode node = (TreeNode) parent.getLastPathComponent();

        if (node.getChildCount() >= 0) 
        {
            for (Enumeration e = node.children(); e.hasMoreElements();) 
            {
              TreeNode n = (TreeNode) e.nextElement();
              TreePath path = parent.pathByAddingChild(n);
              expandAll(tree, path);
            }
        }
        tree.expandPath(parent);
      // tree.collapsePath(parent);
    }
    
    private TreeNode LoadConfiguration()     
    {
        m_objRootNode = new DefaultMutableTreeNode(m_objConfiguration);

        for (QCConfigurationEntry l_objConfigurationEntry : m_objConfiguration.getListConfigurationEntry())
            m_objRootNode.add(GetSubTree(l_objConfigurationEntry));
        
        return m_objRootNode;
    }
    
    private MutableTreeNode GetSubTree(QCConfigurationEntry objConfigurationEntry) 
    {
        DefaultMutableTreeNode l_objNode = new DefaultMutableTreeNode(objConfigurationEntry);
        
        if (objConfigurationEntry.isMenu())
        {
            for (QCConfigurationEntry l_objConfigurationEntry : objConfigurationEntry.getListConfigurationEntry())
                l_objNode.add(GetSubTree(l_objConfigurationEntry));
        }
        
        return l_objNode;
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JToolBar QCConfigTB;
    private javax.swing.JScrollPane QCSP;
    private javax.swing.JTree QCTree;
    private javax.swing.JButton jButton5;
    // End of variables declaration                   

    /**
     * @return the m_objConfiguration
     */
    public QCConfiguration getConfiguration() 
    {
        return m_objConfiguration;
    }

    /**
     * @param m_objConfiguration the m_objConfiguration to set
     */
    public void setConfiguration(QCConfiguration objConfiguration) 
    {
        m_objConfiguration = objConfiguration;
        
        if (m_objFrame == null)
        {
            m_objFrame = new JFrame();
            
            try
            {
                m_objFrame.setIconImage(new ImageIcon(Op.load("QC/edit.png").getImage(null)).getImage());
            }
            catch (Exception ex) 
            {
                ex.printStackTrace();
            }
            
            initComponents();
            
            Dimension l_objScreenDimension = Toolkit.getDefaultToolkit().getScreenSize();
            m_objFrame.setLocation(l_objScreenDimension.width/2-m_objFrame.getWidth()/2, l_objScreenDimension.height/2-m_objFrame.getHeight()/2);            

            m_objFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            m_objFrame.addWindowListener(new WindowListener() 
            {
                @Override
                public void windowClosing(WindowEvent e) 
                {
                    int l_iSelectedOption = JOptionPane.showConfirmDialog(self().m_objFrame, 
                                                      "Are you sure? Any changes not saved will be lost...", 
                                                      "Did you save the changes?", 
                                                      JOptionPane.YES_NO_OPTION,
                                                      JOptionPane.QUESTION_MESSAGE); 
                    
                    if (l_iSelectedOption == JOptionPane.YES_OPTION) 
                    {
                        self().getConfiguration().getQC().UpdateQC(true);
                        self().m_objFrame.setVisible(false);
                    }
                }

                public void windowOpened(WindowEvent e) {}
                public void windowClosed(WindowEvent e) {}
                public void windowIconified(WindowEvent e) {}
                public void windowDeiconified(WindowEvent e) {}
                public void windowActivated(WindowEvent e) {}
                public void windowDeactivated(WindowEvent e) {}
            });
        }
        
        m_objFrame.setTitle("Editing : " + m_objConfiguration.getDescription());
        m_objFrame.setVisible(true);                    
    }

    /**
     * @return the m_objself
     */
    public QCConfig self() {
        return m_objSelf;
    }
}
